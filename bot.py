from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from logic import *
import schedule
import threading
import time
from config import *
from auction_manager import AuctionManager

bot = TeleBot(API_TOKEN)
manager = DatabaseManager(DATABASE)
auction_manager = AuctionManager(DATABASE, bot)

def gen_markup(id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å!", callback_data=id))
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):

    prize_id = call.data
    user_id = call.message.chat.id

    img = manager.get_prize_img(prize_id)
    with open(f'img/{img}', 'rb') as photo:
        bot.send_photo(user_id, photo)


def send_message():
    prize_id, img = manager.get_random_prize()[:2]
    manager.mark_prize_used(prize_id)
    hide_img(img)
    for user in manager.get_users():
        with open(f'hidden_img/{img}', 'rb') as photo:
            bot.send_photo(user, photo, reply_markup=gen_markup(id = prize_id))
        

def shedule_thread():
    schedule.every().minute.do(send_message) # –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    while True:
        schedule.run_pending()
        time.sleep(1)

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    if user_id in manager.get_users():
        bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        manager.add_user(user_id, message.from_user.username)
        bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
–¢–µ–±—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏!
–ö–∞–∂–¥—ã–π —á–∞—Å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç —à–∞–Ω—Å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!
–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å!'

–¢–æ–ª—å–∫–æ —Ç—Ä–∏ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É!)""")
        
@bot.message_handler(commands=['rating'])
def handle_rating(message):
    res = manager.get_rating() 
    res = [f'| @{x[0]:<11} | {x[1]:<11}|\n{"_"*26}' for x in res]
    res = '\n'.join(res)
    res = f'|USER_NAME    |COUNT_PRIZE|\n{"_"*26}\n' + res
    bot.send_message(message.chat.id, res)
    
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    prize_id = call.data
    user_id = call.message.chat.id

    if manager.get_winners_count(prize_id) < 3:
        res = manager.add_winner(user_id, prize_id)
        if res:
            img = manager.get_prize_img(prize_id)
            manager.mark_prize_used(prize_id)
            with open(f'img/{img}', 'rb') as photo:
                bot.send_photo(user_id, photo, caption="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É!")
        else:
            bot.send_message(user_id, '–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É!')
    else:
        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É—Å–ø–µ–ª –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É! –ü–æ–ø—Ä–æ–±—É–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!)")

@bot.message_handler(commands=['start_auction'])
def start_auction(message):
    chat_id = message.chat.id
    result = auction_manager.start_auction(chat_id)
    
    if result:
        prize_id, prize_image = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        hidden_image = open(f'hidden_img/{prize_image}', 'rb')
        bot.send_photo(chat_id, hidden_image, 
                      caption=f"üé∞ –ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞–ª—Å—è!\nüéÅ –ü—Ä–∏–∑ ‚Ññ{prize_id}\n‚è∞ –í—Ä–µ–º—è: 2 –º–∏–Ω—É—Ç—ã\nüí∏ –°—Ç–∞–≤–∫–∏: /bid [—Å—É–º–º–∞]")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤")

@bot.message_handler(commands=['bid'])
def place_bid(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.first_name
    
    try:
        amount = float(message.text.split()[1])
        success, response = auction_manager.place_bid(chat_id, user_id, amount)
        
        if success:
            bot.reply_to(message, f"‚úÖ {response}")
        else:
            bot.reply_to(message, f"‚ùå {response}")
            
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /bid [—Å—É–º–º–∞]")

@bot.message_handler(commands=['auction_info'])
def auction_info(message):
    chat_id = message.chat.id
    info = auction_manager.get_auction_info(chat_id)
    
    if info:
        bot.send_message(
            chat_id,
            f"üéØ –¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω:\n"
            f"üéÅ –ü—Ä–∏–∑: #{info['prize_id']}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {info['current_bid']}\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {info['time_left']} —Å–µ–∫."
        )
    else:
        bot.send_message(chat_id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤")

@bot.message_handler(commands=['balance'])
def check_balance(message):
    user_id = message.from_user.id
    balance = manager.get_user_balance(user_id)
    bot.reply_to(message, f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance}")


def polling_thread():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    manager = DatabaseManager(DATABASE)
    manager.create_tables()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    conn = sqlite3.connect(DATABASE)
    with conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS bids (
                bid_id INTEGER PRIMARY KEY,
                user_id INTEGER,
                prize_id INTEGER,
                amount REAL,
                bid_time TEXT,
                FOREIGN KEY(user_id) REFERENCES users(user_id),
                FOREIGN KEY(prize_id) REFERENCES prizes(prize_id)
            )
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS balances (
                user_id INTEGER PRIMARY KEY,
                balance REAL DEFAULT 1000.0,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        conn.commit()
    
    prizes_img = os.listdir('img')
    data = [(x,) for x in prizes_img]
    manager.add_prize(data)
  
