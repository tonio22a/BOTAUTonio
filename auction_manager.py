import sqlite3
from datetime import datetime, timedelta
from threading import Timer
import asyncio
from logic import DatabaseManager

class AuctionManager:
    def __init__(self, database, bot):
        self.database = database
        self.bot = bot
        self.manager = DatabaseManager(database)
        self.active_auctions = {}
        
    def start_auction(self, chat_id, duration=120):
        prize = self.manager.get_random_prize()
        if not prize:
            return None
            
        prize_id, prize_image = prize
        
        auction = {
            'prize_id': prize_id,
            'prize_image': prize_image,
            'end_time': datetime.now() + timedelta(seconds=duration),
            'is_active': True,
            'timer': None
        }
        
        self.active_auctions[chat_id] = auction
        self._start_timer(chat_id, duration)
        return prize_id, prize_image
    
    def _start_timer(self, chat_id, duration):
        def end_auction():
            self._end_auction(chat_id)
            
        timer = Timer(duration, end_auction)
        timer.start()
        self.active_auctions[chat_id]['timer'] = timer
    
    def _end_auction(self, chat_id):
        if chat_id not in self.active_auctions:
            return
            
        auction = self.active_auctions[chat_id]
        auction['is_active'] = False
        
        winner = self.manager.get_highest_bidder(auction['prize_id'])
        
        if winner:
            user_id, user_name, winning_bid = winner
            self.manager.add_winner(user_id, auction['prize_id'])
            self.manager.mark_prize_used(auction['prize_id'])
            
            asyncio.run(self._send_winner_message(chat_id, user_name, winning_bid, auction['prize_id']))
        else:
            asyncio.run(self.bot.send_message(chat_id, "‚ùå –ù–∞ —ç—Ç–æ—Ç –∞—É–∫—Ü–∏–æ–Ω –Ω–µ –±—ã–ª–æ —Å—Ç–∞–≤–æ–∫. –ü—Ä–∏–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—É–ª."))
    
    async def _send_winner_message(self, chat_id, user_name, winning_bid, prize_id):
        try:
            await self.bot.send_message(
                chat_id, 
                f"üéâ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{user_name}\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {winning_bid}\n"
                f"üéÅ –ü—Ä–∏–∑ ‚Ññ{prize_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—é!"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def place_bid(self, chat_id, user_id, amount):
        if chat_id not in self.active_auctions or not self.active_auctions[chat_id]['is_active']:
            return False, "–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        
        balance = self.manager.get_user_balance(user_id)
        if balance < amount:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
        
        current_bid = self.manager.get_highest_bid(self.active_auctions[chat_id]['prize_id'])
        if amount <= current_bid:
            return False, f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π ({current_bid})"
        
        self.manager.add_bid(user_id, self.active_auctions[chat_id]['prize_id'], amount)
        return True, "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"
    
    def get_auction_info(self, chat_id):
        if chat_id not in self.active_auctions:
            return None
        
        auction = self.active_auctions[chat_id]
        current_bid = self.manager.get_highest_bid(auction['prize_id'])
        time_left = (auction['end_time'] - datetime.now()).seconds
        
        return {
            'prize_id': auction['prize_id'],
            'current_bid': current_bid,
            'time_left': time_left,
            'is_active': auction['is_active']
        }